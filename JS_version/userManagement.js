const { logger } = require('./logger');

function setupUserManagement(bot, config, logger) {
    // Add user command
    bot.onText(/\/adduser (\d+)/, async (msg, match) => {
        const adminId = msg.from.id;
        const chatId = msg.chat.id;
        
        if (!config.isAdmin(adminId)) {
            await bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
            return;
        }

        const userToAdd = parseInt(match[1], 10);
        if (!config.bot.allowedUsers.includes(userToAdd)) {
            config.bot.allowedUsers.push(userToAdd);
            
            logger.info('User added to allowed list', {
                adminId,
                addedUserId: userToAdd
            });
            
            await bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:${userToAdd} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.`);
            
            // Try to notify the added user if possible
            try {
                await bot.sendMessage(
                    userToAdd,
                    '–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.'
                );
            } catch (error) {
                logger.warn('Could not notify new user', {
                    userId: userToAdd,
                    error: error.message
                });
            }
        } else {
            await bot.sendMessage(chatId, '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.');
        }
    });

    // Remove user command
    bot.onText(/\/removeuser (\d+)/, async (msg, match) => {
        const adminId = msg.from.id;
        const chatId = msg.chat.id;
        
        if (!config.isAdmin(adminId)) {
            await bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
            return;
        }

        const userToRemove = parseInt(match[1], 10);
        const index = config.bot.allowedUsers.indexOf(userToRemove);
        
        if (index > -1) {
            config.bot.allowedUsers.splice(index, 1);
            
            logger.info('User removed from allowed list', {
                adminId,
                removedUserId: userToRemove
            });
            
            await bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:${userToRemove} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.`);
            
            // Try to notify the removed user
            try {
                await bot.sendMessage(
                    userToRemove,
                    '–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
                );
            } catch (error) {
                logger.warn('Could not notify removed user', {
                    userId: userToRemove,
                    error: error.message
                });
            }
        } else {
            await bot.sendMessage(chatId, '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.');
        }
    });

    // List allowed users command
    bot.onText(/\/listusers/, async (msg) => {
        const adminId = msg.from.id;
        const chatId = msg.chat.id;
        
        if (!config.isAdmin(adminId)) {
            await bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
            return;
        }

        if (config.bot.allowedUsers.length === 0) {
            await bot.sendMessage(chatId, 
                'üìã –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /adduser –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            );
            return;
        }

        const userList = config.bot.allowedUsers
            .map(id => `‚Ä¢ ${id}`)
            .join('\n');
            
        await bot.sendMessage(
            chatId,
            'üìã *–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n' +
            `${userList}\n\n` +
            `üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* ${config.bot.adminId}`,
            { parse_mode: 'Markdown' }
        );
    });
}

module.exports = { setupUserManagement };