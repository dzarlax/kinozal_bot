package menu

import (
	"fmt"
	"strings"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"kinozal-bot/config"
	"kinozal-bot/errorhandler"
	"kinozal-bot/logger"
	"kinozal-bot/usermanagement"
)

func SetupBotCommands(bot *tgbotapi.BotAPI, cfg *config.Config, chatID int64) error {
	// –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	commands := []tgbotapi.BotCommand{
		{Command: "start", Description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"},
		{Command: "help", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"},
		{Command: "find", Description: "–ù–∞–π—Ç–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: /find –ú–∞—Ç—Ä–∏—Ü–∞)"},
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
	if chatID == int64(cfg.Bot.AdminID) {
		commands = append(commands,
			tgbotapi.BotCommand{Command: "adduser", Description: "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"},
			tgbotapi.BotCommand{Command: "removeuser", Description: "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"},
			tgbotapi.BotCommand{Command: "listusers", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"},
		)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	cmdConfig := tgbotapi.NewSetMyCommands(commands...)
	_, err := bot.Request(cmdConfig)
	if err != nil {
		logger.Error("Failed to set bot commands", map[string]interface{}{
			"error": err.Error(),
		})
		return err
	}

	logger.Info("Bot commands successfully set up", nil)
	return nil
}

func HandleStart(bot *tgbotapi.BotAPI, cfg *config.Config, eh *errorhandler.ErrorHandler, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	username := update.Message.From.UserName

	// –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
	message := fmt.Sprintf(`–ü—Ä–∏–≤–µ—Ç, %s\! üëã
ü§ñ –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä—Ä–µ–Ω—Ç–∞–º–∏ Kinozal\.

*–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
üîç –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–∞—á–∏: /find \<–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\>
üÜò –ü–æ–ª—É—á–∏—Ç–µ —Å–ø—Ä–∞–≤–∫—É: /help

`, escapeMarkdownV2(username))

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
	if chatID == int64(cfg.Bot.AdminID) {
		message += `üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:*
‚ñ´Ô∏è /adduser \<ID\> \- –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚ñ´Ô∏è /removeuser \<ID\> \- —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚ñ´Ô∏è /listusers \- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\.
`
	}

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "MarkdownV2"

	if _, err := bot.Send(msg); err != nil {
		logger.Error("Failed to send /start response", map[string]interface{}{
			"error": err.Error(),
		})
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ MarkdownV2
func escapeMarkdownV2(text string) string {
	specialChars := []string{"_", "*", "[", "]", "(", ")", "~", "`", ">", "#", "+", "-", "=", "|", "{", "}", ".", "!"}
	for _, char := range specialChars {
		text = strings.ReplaceAll(text, char, "\\"+char)
	}
	return text
}

func HandleHelp(bot *tgbotapi.BotAPI, cfg *config.Config, eh *errorhandler.ErrorHandler, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	helpMessage := `üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üîç *–ü–æ–∏—Å–∫ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤*
/find - –ø–æ–∏—Å–∫ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: /find –ú–∞—Ç—Ä–∏—Ü–∞)
`

	// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
	if chatID == int64(cfg.Bot.AdminID) {
		helpMessage += `üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:*
/adduser <ID> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/removeuser <ID> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/listusers - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
`
	}

	msg := tgbotapi.NewMessage(chatID, helpMessage)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func HandleUserCommands(bot *tgbotapi.BotAPI, cfg *config.Config, eh *errorhandler.ErrorHandler, update tgbotapi.Update) {
	switch update.Message.Command() {
	case "adduser", "removeuser", "listusers":
		usermanagement.HandleUserCommands(
			bot,
			cfg,
			update.Message.Chat.ID,
			update.Message.Command(),
			update.Message.CommandArguments(),
		)
	}
}